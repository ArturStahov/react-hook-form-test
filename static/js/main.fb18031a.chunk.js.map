{"version":3,"sources":["redux/contact-action.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","App.js","redux/store.js","index.js"],"names":["addContact","createAction","contacts","payload","id","uniqid","deleteContact","Form","styled","form","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","connect","dispatch","onAddContact","contact","action","classes","useForm","handleSubmit","register","errors","watch","control","onSubmit","data","name","defaultValue","render","onChange","value","TextField","className","label","required","exampleRequired","FormControl","InputLabel","Select","labelId","MenuItem","Button","type","variant","color","List","ul","ListItem","li","root","bullet","display","transform","title","fontSize","pos","marginBottom","state","contactsArr","onDelete","map","item","Card","CardContent","Typography","gutterBottom","lastName","component","Age","secondName","CardActions","size","onClick","App","contactReducer","createReducer","filter","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","devTools","process","ReactDOM","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.fb18031a.chunk.js","sourcesContent":["import uniqid from 'uniqid';\nimport { createAction } from '@reduxjs/toolkit';\n\nexport const addContact = createAction('contacts/add', contacts => {\n  return {\n    payload: {\n      ...contacts,\n      id: uniqid(),\n    },\n  };\n});\n\nexport const deleteContact = createAction('contacts/delete');\n","import React from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { connect } from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport * as action from '../../redux/contact-action';\nimport styled from 'styled-components';\n\nconst Form = styled.form`\n  width: 400px;\n  margin: 0 auto 50px;\n  display: flex;\n  justify-content: flex-start;\n  flex-wrap: wrap;\n  & > .input {\n    width: 80%;\n    margin-bottom: 30px;\n  }\n  & > .button {\n    width: 80%;\n  }\n`;\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(0),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nfunction ContactsForm({ onAddContact }) {\n  const classes = useStyles();\n  const { register, handleSubmit, watch, errors, control } = useForm();\n  const onSubmit = data => {\n    onAddContact(data);\n  };\n\n  return (\n    <>\n      {/* \"handleSubmit\" will validate your inputs before invoking \"onSubmit\" */}\n      <Form onSubmit={handleSubmit(onSubmit)}>\n        {/* register your input into the hook by invoking the \"register\" function */}\n        <Controller\n          name=\"name\"\n          control={control}\n          defaultValue=\"\"\n          render={({ onChange, value }) => (\n            <TextField\n              className=\"input\"\n              id=\"standard-basic\"\n              label=\"Name\"\n              onChange={onChange}\n              value={value}\n              required\n            />\n          )}\n        />\n\n        <Controller\n          name=\"lastName\"\n          control={control}\n          defaultValue=\"\"\n          render={({ onChange, value }) => (\n            <TextField\n              className=\"input\"\n              id=\"standard-basic\"\n              label=\"lastName\"\n              onChange={onChange}\n              value={value}\n              required\n            />\n          )}\n        />\n        {/* errors will return when field validation fails  */}\n        {errors.exampleRequired && <span>This is required</span>}\n\n        <Controller\n          name=\"Age\"\n          control={control}\n          defaultValue=\"\"\n          render={({ onChange, value }) => (\n            <FormControl className={classes.formControl}>\n              <InputLabel id=\"demo-simple-select-label\">Age</InputLabel>\n              <Select\n                labelId=\"demo-simple-select-label\"\n                id=\"demo-simple-select\"\n                value={value}\n                onChange={onChange}\n              >\n                <MenuItem value={10}>Ten</MenuItem>\n                <MenuItem value={20}>Twenty</MenuItem>\n                <MenuItem value={30}>Thirty</MenuItem>\n              </Select>\n            </FormControl>\n          )}\n        />\n\n        <Controller\n          name=\"secondName\"\n          control={control}\n          defaultValue=\"\"\n          render={({ onChange, value }) => (\n            <TextField\n              className=\"input\"\n              id=\"standard-basic\"\n              label=\"secondName\"\n              onChange={onChange}\n              value={value}\n              required\n            />\n          )}\n        />\n        <Button\n          className=\"button\"\n          type=\"submit\"\n          variant=\"contained\"\n          color=\"secondary\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAddContact: contact => dispatch(action.addContact(contact)),\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(ContactsForm);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport styled from 'styled-components';\nimport * as action from '../../redux/contact-action';\n\nconst List = styled.ul`\n  width: 500px;\n  margin: 0 auto;\n  display: flex;\n  flex-wrap: wrap;\n`;\nconst ListItem = styled.li`\n  width: 100%;\n  margin-bottom: 20px;\n`;\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nfunction ContactsList({ onDelete, contactsArr }) {\n  const classes = useStyles();\n\n  return (\n    <List>\n      {contactsArr.map(item => (\n        <ListItem key={item.id}>\n          <Card className={classes.root}>\n            <CardContent>\n              <Typography\n                className={classes.title}\n                color=\"textSecondary\"\n                gutterBottom\n              >\n                {item.name}\n              </Typography>\n\n              <Typography className={classes.pos} color=\"textSecondary\">\n                {item.lastName}\n              </Typography>\n              <Typography variant=\"body2\" component=\"p\">\n                {item.Age}\n                <br />\n                {item.secondName}\n              </Typography>\n            </CardContent>\n            <CardActions>\n              <Button size=\"small\" onClick={() => onDelete(item.id)}>\n                Delete Card\n              </Button>\n            </CardActions>\n          </Card>\n        </ListItem>\n      ))}\n    </List>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    contactsArr: state.contacts,\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    onDelete: id => dispatch(action.deleteContact(id)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\n","import React from 'react';\nimport ContactsForm from './components/ContactForm';\nimport ContactsList from './components/ContactList';\n\nexport default function App() {\n  return (\n    <>\n      <ContactsForm />\n      <ContactsList />\n    </>\n  );\n}\n","import {\n  configureStore,\n  getDefaultMiddleware,\n  createReducer,\n} from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport * as action from './contact-action';\n\nconst contactReducer = createReducer([], {\n  [action.addContact]: (state, { payload }) => [...state, payload],\n  [action.deleteContact]: (state, { payload }) =>\n    state.filter(item => item.id !== payload),\n});\n\nconst middleware = [...getDefaultMiddleware(), logger];\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactReducer,\n  },\n  devTools: process.env.NODE_ENV === 'development',\n  middleware,\n});\n\nexport default store;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport '@csstools/normalize.css';\r\nimport './base.css';\r\nimport App from './App';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.querySelector('#root'),\r\n);\r\n"],"sourceRoot":""}